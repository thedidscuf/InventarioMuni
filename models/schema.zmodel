

model RoleData {

    id                String        @id @default(uuid())  
    name            String?          
    description  String?          

dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Location {

    id                String        @id @default(uuid())  
    name            String?          
    address      String?          
    type            String?          

inventorys  Inventory[]  @relation("location")  
      dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Supplier {

    id                String        @id @default(uuid())  
    name            String?          
    contactPerson  String?          
    email          String?          
    phone          String?          
    address      String?          

products    Product[]  @relation("supplier")  
      dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Product {

    id                String        @id @default(uuid())  
    name            String?          
    description  String?          
    price          Float?            
    sku              String?          
    imageUrl    String?          
    supplierId  String?          
    supplier    Supplier?    @relation(fields: [supplierId], references: [id], name:"supplier")  

inventorys  Inventory[]  @relation("product")  
    movements  Movement[]  @relation("product")  
      dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Inventory {

    id                String        @id @default(uuid())  
    quantity    Float?            
    productId  String?          
    product      Product?      @relation(fields: [productId], references: [id], name:"product")  
    locationId  String?          
    location    Location?    @relation(fields: [locationId], references: [id], name:"location")  

dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Movement {

    id                String        @id @default(uuid())  
    quantity    Float?            
    type            String?          
    date            String?          
    productId  String?          
    product      Product?      @relation(fields: [productId], references: [id], name:"product")  
    userId        String?          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  

dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Department {

    id                String        @id @default(uuid())  
    name            String?          
    description  String?          

dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Report {

    id                String        @id @default(uuid())  
    name            String?          
    description  String?          
    fileUrl      String?          
    createdById  String?          
    createdBy  User?            @relation(fields: [createdById], references: [id], name:"createdBy")  

dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                String             @id @default(uuid())
    name              String?
    email             String?            @unique
    pictureUrl        String?            @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation   String?
    emailVerified     Boolean?
    
    stripeCustomerId  String?
    
    status            UserStatus         @default(VERIFIED)

    // this is the role of the user for the application
    globalRole        String             @default('USER')
    password          String?            @password @omit
    dateCreated       DateTime           @default(now())
    dateUpdated       DateTime           @updatedAt @default(now())
    accounts          Account[]
    sessions          Session[]

movements  Movement[]  @relation("user")  
        reportsAsCreatedBy  Report[]    @relation("createdBy")  

@@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])

    @@allow("all", auth().id == user.id)
}

model RagVector {
    id        String   @id @default(uuid())
    key       String
    url       String
    tags      String[] @default([])
    vectors   Bytes?   @omit
    documents Bytes?   @omit

@@allow("all", true)
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@allow("all", auth().id == user.id)
}

generator client {
    provider = "prisma-client-js"
}

plugin prisma {
    provider = '@core/prisma'
    output = "./../prisma/schema.prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("SERVER_DATABASE_URL")
}

plugin trpc {
    provider = '@zenstackhq/trpc'
    output = "./../src/.marblism/api"
    generateClientHelpers = ['react']
    generateModelActions = ['create', 'update', 'delete', 'findMany', 'findFirst', 'findUnique', 'createMany', 'updateMany', 'deleteMany']
}
