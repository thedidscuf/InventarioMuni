//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model RoleData {
  id          String   @id() @default(uuid())
  name        String?
  description String?
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Location {
  id          String      @id() @default(uuid())
  name        String?
  address     String?
  type        String?
  inventorys  Inventory[] @relation("location")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Supplier {
  id            String    @id() @default(uuid())
  name          String?
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  products      Product[] @relation("supplier")
  dateCreated   DateTime  @default(now())
  dateUpdated   DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Product {
  id          String      @id() @default(uuid())
  name        String?
  description String?
  price       Float?
  sku         String?
  imageUrl    String?
  supplierId  String?
  supplier    Supplier?   @relation(fields: [supplierId], references: [id], name: "supplier")
  inventorys  Inventory[] @relation("product")
  movements   Movement[]  @relation("product")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Inventory {
  id          String    @id() @default(uuid())
  quantity    Float?
  productId   String?
  product     Product?  @relation(fields: [productId], references: [id], name: "product")
  locationId  String?
  location    Location? @relation(fields: [locationId], references: [id], name: "location")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Movement {
  id          String   @id() @default(uuid())
  quantity    Float?
  type        String?
  date        String?
  productId   String?
  product     Product? @relation(fields: [productId], references: [id], name: "product")
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Department {
  id          String   @id() @default(uuid())
  name        String?
  description String?
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Report {
  id          String   @id() @default(uuid())
  name        String?
  description String?
  fileUrl     String?
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [id], name: "createdBy")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                 String     @id() @default(uuid())
  name               String?
  email              String?    @unique()
  pictureUrl         String?    @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation    String?
  emailVerified      Boolean?
  stripeCustomerId   String?
  status             UserStatus @default(VERIFIED)
  globalRole         String     @default("USER")
  /// @password
  /// @omit
  password           String?
  dateCreated        DateTime   @default(now())
  dateUpdated        DateTime   @default(now()) @updatedAt()
  accounts           Account[]
  sessions           Session[]
  movements          Movement[] @relation("user")
  reportsAsCreatedBy Report[]   @relation("createdBy")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
